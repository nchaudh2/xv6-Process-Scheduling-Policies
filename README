PART I: system call that shuts down the machine

The original xv6 system doesn't have a \shutdown" command to
properly turn off the emulated machine. In the baseline code, a new file named shutdown.c
implements the user space command shutdown. The missing parts for the shutdown command
(and thus my work for this part) are the implementation of the system call that can shut down
the machine and the corresponding system call user-level wrapper function, which is called by the
shutdown command program (i.e., shutdown.c).


PART II: race condition after fork()

After a fork(), either the parent process or the child process can be
scheduled to run first. Some OSes schedule the parent to run first most often, while others allow
the child to run first mostly. The xv6 OS by default schedules the parents to run
First after fork()s mostly. In this part, I have changed this race condition to allow the child
process to run first mostly after a fork().


PART III: proportional-share process scheduler - stride scheduling

The default scheduler of xv6 adopts a round-robin (RR) policy. In this part, I have implemented 
a simple stride scheduling policy.

The stride scheduling policy:
The whole system has 100 tickets in total (i.e., STRIDE TOTAL TICKETS = 100).
Whenever a new process is added to or an existing process removed from the system, the
100 tickets are evenly assigned to all active processes (i.e., RUNNABLE and RUNNING
processes). Formally, when a new process is added to or an existing process is removed from
the system, the tickets of each active process p (ticketp) is calculated as
ticketp = b
STRIDE TOTAL TICKETS
N
c (1)
where N is the number of active processes. At the same time, the pass values of all the
active processes should be reset (e.g., to 0).
For example, if there is only one active process (pA), pA should have all the 100 tickets.
When a new process (pB) is added to the system, pA and pB should have 50 tickets each.
Another example is that, if there are four active processes (pA, pB, pC, pD) and pA exits,
then the 100 tickets should be evenly redistributed to the remaining three active processes.
In this case, pB, pC, and pD should have 33 tickets each.
The stride value of each process p (stridep) is calculated as
stridep = b
STRIDE TOTAL TICKETS
ticketp
c (2)
where ticketp is the number of tickets that p has.
At the time the scheduler needs to make a scheduling decision, the active process with the
lowest pass value gets scheduled (refer to our course material for the details of the stride
scheduling algorithm).
If there are multiple processes with the same smallest pass value, the one with the smallest
pid gets scheduled.
A process cannot increase its own tickets. But it can transfer its own tickets to another
process


something about xv6:


xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern x86-based multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also http://pdos.csail.mit.edu/6.828/2014/xv6.html, which
provides pointers to on-line resources for v6.

xv6 borrows code from the following sources:
    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
    Plan 9 (entryother.S, mp.h, mp.c, lapic.c)
    FreeBSD (ioapic.c)
    NetBSD (console.c)

The following people have made contributions:
    Russ Cox (context switching, locking)
    Cliff Frey (MP)
    Xiao Yu (MP)
    Nickolai Zeldovich
    Austin Clements

In addition, we are grateful for the bug reports and patches contributed by
Silas Boyd-Wickizer, Peter Froehlich, Shivam Handa, Anders Kaseorg, Eddie
Kohler, Yandong Mao, Hitoshi Mitake, Carmi Merimovich, Joel Nider, Greg Price,
Eldar Sehayek, Yongming Shen, Stephen Tu, and Zouchangwei.

The code in the files that constitute xv6 is
Copyright 2006-2014 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

If you spot errors or have suggestions for improvement, please send
email to Frans Kaashoek and Robert Morris (kaashoek,rtm@csail.mit.edu). 

BUILDING AND RUNNING XV6

To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run "make".
On non-x86 or non-ELF machines (like OS X, even on x86), you will
need to install a cross-compiler gcc suite capable of producing x86 ELF
binaries.  See http://pdos.csail.mit.edu/6.828/2014/tools.html.
Then run "make TOOLPREFIX=i386-jos-elf-".

To run xv6, install the QEMU PC simulators.  To run in QEMU, run "make qemu".

To create a typeset version of the code, run "make xv6.pdf".  This
requires the "mpage" utility.  See http://www.mesa.nl/pub/mpage/.
